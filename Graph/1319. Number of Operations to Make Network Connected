class Solution {
public:
    void dfs(int node, vector<vector<int>>& adj, vector<bool>& vis, int &unused){
        vis[node] = true;
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(it, adj, vis, unused);
            }
            else{
                unused++;
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size()<n-1)    return -1;
        vector<vector<int>> adj(n);
        for(auto c: connections){
            adj[c[0]].push_back(c[1]);
            adj[c[1]].push_back(c[0]);
        }
        int cnt = 0, unused = 0;
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                cnt++;
                dfs(i,adj,vis,unused);
            }
        }
        if(unused>=cnt-1){
            return cnt-1;
        }
        return -1;
    }
};
